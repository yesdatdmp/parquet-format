/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.parquet.format;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Data page header
 */
public class DataPageHeader implements org.apache.thrift.TBase<DataPageHeader, DataPageHeader._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataPageHeader");

  private static final org.apache.thrift.protocol.TField NUM_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_values", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ENCODING_FIELD_DESC = new org.apache.thrift.protocol.TField("encoding", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DEFINITION_LEVEL_ENCODING_FIELD_DESC = new org.apache.thrift.protocol.TField("definition_level_encoding", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REPETITION_LEVEL_ENCODING_FIELD_DESC = new org.apache.thrift.protocol.TField("repetition_level_encoding", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField STATISTICS_FIELD_DESC = new org.apache.thrift.protocol.TField("statistics", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  /**
   * Number of values, including NULLs, in this data page. *
   */
  public int num_values; // required
  /**
   * Encoding used for this data page *
   * 
   * @see Encoding
   */
  public Encoding encoding; // required
  /**
   * Encoding used for definition levels *
   * 
   * @see Encoding
   */
  public Encoding definition_level_encoding; // required
  /**
   * Encoding used for repetition levels *
   * 
   * @see Encoding
   */
  public Encoding repetition_level_encoding; // required
  /**
   * Optional statistics for the data in this page*
   */
  public Statistics statistics; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Number of values, including NULLs, in this data page. *
     */
    NUM_VALUES((short)1, "num_values"),
    /**
     * Encoding used for this data page *
     * 
     * @see Encoding
     */
    ENCODING((short)2, "encoding"),
    /**
     * Encoding used for definition levels *
     * 
     * @see Encoding
     */
    DEFINITION_LEVEL_ENCODING((short)3, "definition_level_encoding"),
    /**
     * Encoding used for repetition levels *
     * 
     * @see Encoding
     */
    REPETITION_LEVEL_ENCODING((short)4, "repetition_level_encoding"),
    /**
     * Optional statistics for the data in this page*
     */
    STATISTICS((short)5, "statistics");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_VALUES
          return NUM_VALUES;
        case 2: // ENCODING
          return ENCODING;
        case 3: // DEFINITION_LEVEL_ENCODING
          return DEFINITION_LEVEL_ENCODING;
        case 4: // REPETITION_LEVEL_ENCODING
          return REPETITION_LEVEL_ENCODING;
        case 5: // STATISTICS
          return STATISTICS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_VALUES_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_VALUES, new org.apache.thrift.meta_data.FieldMetaData("num_values", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENCODING, new org.apache.thrift.meta_data.FieldMetaData("encoding", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Encoding.class)));
    tmpMap.put(_Fields.DEFINITION_LEVEL_ENCODING, new org.apache.thrift.meta_data.FieldMetaData("definition_level_encoding", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Encoding.class)));
    tmpMap.put(_Fields.REPETITION_LEVEL_ENCODING, new org.apache.thrift.meta_data.FieldMetaData("repetition_level_encoding", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Encoding.class)));
    tmpMap.put(_Fields.STATISTICS, new org.apache.thrift.meta_data.FieldMetaData("statistics", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Statistics.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataPageHeader.class, metaDataMap);
  }

  public DataPageHeader() {
  }

  public DataPageHeader(
    int num_values,
    Encoding encoding,
    Encoding definition_level_encoding,
    Encoding repetition_level_encoding)
  {
    this();
    this.num_values = num_values;
    setNum_valuesIsSet(true);
    this.encoding = encoding;
    this.definition_level_encoding = definition_level_encoding;
    this.repetition_level_encoding = repetition_level_encoding;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataPageHeader(DataPageHeader other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.num_values = other.num_values;
    if (other.isSetEncoding()) {
      this.encoding = other.encoding;
    }
    if (other.isSetDefinition_level_encoding()) {
      this.definition_level_encoding = other.definition_level_encoding;
    }
    if (other.isSetRepetition_level_encoding()) {
      this.repetition_level_encoding = other.repetition_level_encoding;
    }
    if (other.isSetStatistics()) {
      this.statistics = new Statistics(other.statistics);
    }
  }

  public DataPageHeader deepCopy() {
    return new DataPageHeader(this);
  }

  @Override
  public void clear() {
    setNum_valuesIsSet(false);
    this.num_values = 0;
    this.encoding = null;
    this.definition_level_encoding = null;
    this.repetition_level_encoding = null;
    this.statistics = null;
  }

  /**
   * Number of values, including NULLs, in this data page. *
   */
  public int getNum_values() {
    return this.num_values;
  }

  /**
   * Number of values, including NULLs, in this data page. *
   */
  public DataPageHeader setNum_values(int num_values) {
    this.num_values = num_values;
    setNum_valuesIsSet(true);
    return this;
  }

  public void unsetNum_values() {
    __isset_bit_vector.clear(__NUM_VALUES_ISSET_ID);
  }

  /** Returns true if field num_values is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_values() {
    return __isset_bit_vector.get(__NUM_VALUES_ISSET_ID);
  }

  public void setNum_valuesIsSet(boolean value) {
    __isset_bit_vector.set(__NUM_VALUES_ISSET_ID, value);
  }

  /**
   * Encoding used for this data page *
   * 
   * @see Encoding
   */
  public Encoding getEncoding() {
    return this.encoding;
  }

  /**
   * Encoding used for this data page *
   * 
   * @see Encoding
   */
  public DataPageHeader setEncoding(Encoding encoding) {
    this.encoding = encoding;
    return this;
  }

  public void unsetEncoding() {
    this.encoding = null;
  }

  /** Returns true if field encoding is set (has been assigned a value) and false otherwise */
  public boolean isSetEncoding() {
    return this.encoding != null;
  }

  public void setEncodingIsSet(boolean value) {
    if (!value) {
      this.encoding = null;
    }
  }

  /**
   * Encoding used for definition levels *
   * 
   * @see Encoding
   */
  public Encoding getDefinition_level_encoding() {
    return this.definition_level_encoding;
  }

  /**
   * Encoding used for definition levels *
   * 
   * @see Encoding
   */
  public DataPageHeader setDefinition_level_encoding(Encoding definition_level_encoding) {
    this.definition_level_encoding = definition_level_encoding;
    return this;
  }

  public void unsetDefinition_level_encoding() {
    this.definition_level_encoding = null;
  }

  /** Returns true if field definition_level_encoding is set (has been assigned a value) and false otherwise */
  public boolean isSetDefinition_level_encoding() {
    return this.definition_level_encoding != null;
  }

  public void setDefinition_level_encodingIsSet(boolean value) {
    if (!value) {
      this.definition_level_encoding = null;
    }
  }

  /**
   * Encoding used for repetition levels *
   * 
   * @see Encoding
   */
  public Encoding getRepetition_level_encoding() {
    return this.repetition_level_encoding;
  }

  /**
   * Encoding used for repetition levels *
   * 
   * @see Encoding
   */
  public DataPageHeader setRepetition_level_encoding(Encoding repetition_level_encoding) {
    this.repetition_level_encoding = repetition_level_encoding;
    return this;
  }

  public void unsetRepetition_level_encoding() {
    this.repetition_level_encoding = null;
  }

  /** Returns true if field repetition_level_encoding is set (has been assigned a value) and false otherwise */
  public boolean isSetRepetition_level_encoding() {
    return this.repetition_level_encoding != null;
  }

  public void setRepetition_level_encodingIsSet(boolean value) {
    if (!value) {
      this.repetition_level_encoding = null;
    }
  }

  /**
   * Optional statistics for the data in this page*
   */
  public Statistics getStatistics() {
    return this.statistics;
  }

  /**
   * Optional statistics for the data in this page*
   */
  public DataPageHeader setStatistics(Statistics statistics) {
    this.statistics = statistics;
    return this;
  }

  public void unsetStatistics() {
    this.statistics = null;
  }

  /** Returns true if field statistics is set (has been assigned a value) and false otherwise */
  public boolean isSetStatistics() {
    return this.statistics != null;
  }

  public void setStatisticsIsSet(boolean value) {
    if (!value) {
      this.statistics = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUM_VALUES:
      if (value == null) {
        unsetNum_values();
      } else {
        setNum_values((Integer)value);
      }
      break;

    case ENCODING:
      if (value == null) {
        unsetEncoding();
      } else {
        setEncoding((Encoding)value);
      }
      break;

    case DEFINITION_LEVEL_ENCODING:
      if (value == null) {
        unsetDefinition_level_encoding();
      } else {
        setDefinition_level_encoding((Encoding)value);
      }
      break;

    case REPETITION_LEVEL_ENCODING:
      if (value == null) {
        unsetRepetition_level_encoding();
      } else {
        setRepetition_level_encoding((Encoding)value);
      }
      break;

    case STATISTICS:
      if (value == null) {
        unsetStatistics();
      } else {
        setStatistics((Statistics)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_VALUES:
      return Integer.valueOf(getNum_values());

    case ENCODING:
      return getEncoding();

    case DEFINITION_LEVEL_ENCODING:
      return getDefinition_level_encoding();

    case REPETITION_LEVEL_ENCODING:
      return getRepetition_level_encoding();

    case STATISTICS:
      return getStatistics();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUM_VALUES:
      return isSetNum_values();
    case ENCODING:
      return isSetEncoding();
    case DEFINITION_LEVEL_ENCODING:
      return isSetDefinition_level_encoding();
    case REPETITION_LEVEL_ENCODING:
      return isSetRepetition_level_encoding();
    case STATISTICS:
      return isSetStatistics();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DataPageHeader)
      return this.equals((DataPageHeader)that);
    return false;
  }

  public boolean equals(DataPageHeader that) {
    if (that == null)
      return false;

    boolean this_present_num_values = true;
    boolean that_present_num_values = true;
    if (this_present_num_values || that_present_num_values) {
      if (!(this_present_num_values && that_present_num_values))
        return false;
      if (this.num_values != that.num_values)
        return false;
    }

    boolean this_present_encoding = true && this.isSetEncoding();
    boolean that_present_encoding = true && that.isSetEncoding();
    if (this_present_encoding || that_present_encoding) {
      if (!(this_present_encoding && that_present_encoding))
        return false;
      if (!this.encoding.equals(that.encoding))
        return false;
    }

    boolean this_present_definition_level_encoding = true && this.isSetDefinition_level_encoding();
    boolean that_present_definition_level_encoding = true && that.isSetDefinition_level_encoding();
    if (this_present_definition_level_encoding || that_present_definition_level_encoding) {
      if (!(this_present_definition_level_encoding && that_present_definition_level_encoding))
        return false;
      if (!this.definition_level_encoding.equals(that.definition_level_encoding))
        return false;
    }

    boolean this_present_repetition_level_encoding = true && this.isSetRepetition_level_encoding();
    boolean that_present_repetition_level_encoding = true && that.isSetRepetition_level_encoding();
    if (this_present_repetition_level_encoding || that_present_repetition_level_encoding) {
      if (!(this_present_repetition_level_encoding && that_present_repetition_level_encoding))
        return false;
      if (!this.repetition_level_encoding.equals(that.repetition_level_encoding))
        return false;
    }

    boolean this_present_statistics = true && this.isSetStatistics();
    boolean that_present_statistics = true && that.isSetStatistics();
    if (this_present_statistics || that_present_statistics) {
      if (!(this_present_statistics && that_present_statistics))
        return false;
      if (!this.statistics.equals(that.statistics))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_num_values = true;
    builder.append(present_num_values);
    if (present_num_values)
      builder.append(num_values);

    boolean present_encoding = true && (isSetEncoding());
    builder.append(present_encoding);
    if (present_encoding)
      builder.append(encoding.getValue());

    boolean present_definition_level_encoding = true && (isSetDefinition_level_encoding());
    builder.append(present_definition_level_encoding);
    if (present_definition_level_encoding)
      builder.append(definition_level_encoding.getValue());

    boolean present_repetition_level_encoding = true && (isSetRepetition_level_encoding());
    builder.append(present_repetition_level_encoding);
    if (present_repetition_level_encoding)
      builder.append(repetition_level_encoding.getValue());

    boolean present_statistics = true && (isSetStatistics());
    builder.append(present_statistics);
    if (present_statistics)
      builder.append(statistics);

    return builder.toHashCode();
  }

  public int compareTo(DataPageHeader other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DataPageHeader typedOther = (DataPageHeader)other;

    lastComparison = Boolean.valueOf(isSetNum_values()).compareTo(typedOther.isSetNum_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_values, typedOther.num_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEncoding()).compareTo(typedOther.isSetEncoding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncoding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encoding, typedOther.encoding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefinition_level_encoding()).compareTo(typedOther.isSetDefinition_level_encoding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefinition_level_encoding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.definition_level_encoding, typedOther.definition_level_encoding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepetition_level_encoding()).compareTo(typedOther.isSetRepetition_level_encoding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepetition_level_encoding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repetition_level_encoding, typedOther.repetition_level_encoding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatistics()).compareTo(typedOther.isSetStatistics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatistics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statistics, typedOther.statistics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NUM_VALUES
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.num_values = iprot.readI32();
            setNum_valuesIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ENCODING
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.encoding = Encoding.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // DEFINITION_LEVEL_ENCODING
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.definition_level_encoding = Encoding.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // REPETITION_LEVEL_ENCODING
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.repetition_level_encoding = Encoding.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // STATISTICS
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.statistics = new Statistics();
            this.statistics.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetNum_values()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_values' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(NUM_VALUES_FIELD_DESC);
    oprot.writeI32(this.num_values);
    oprot.writeFieldEnd();
    if (this.encoding != null) {
      oprot.writeFieldBegin(ENCODING_FIELD_DESC);
      oprot.writeI32(this.encoding.getValue());
      oprot.writeFieldEnd();
    }
    if (this.definition_level_encoding != null) {
      oprot.writeFieldBegin(DEFINITION_LEVEL_ENCODING_FIELD_DESC);
      oprot.writeI32(this.definition_level_encoding.getValue());
      oprot.writeFieldEnd();
    }
    if (this.repetition_level_encoding != null) {
      oprot.writeFieldBegin(REPETITION_LEVEL_ENCODING_FIELD_DESC);
      oprot.writeI32(this.repetition_level_encoding.getValue());
      oprot.writeFieldEnd();
    }
    if (this.statistics != null) {
      if (isSetStatistics()) {
        oprot.writeFieldBegin(STATISTICS_FIELD_DESC);
        this.statistics.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DataPageHeader(");
    boolean first = true;

    sb.append("num_values:");
    sb.append(this.num_values);
    first = false;
    if (!first) sb.append(", ");
    sb.append("encoding:");
    if (this.encoding == null) {
      sb.append("null");
    } else {
      sb.append(this.encoding);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("definition_level_encoding:");
    if (this.definition_level_encoding == null) {
      sb.append("null");
    } else {
      sb.append(this.definition_level_encoding);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repetition_level_encoding:");
    if (this.repetition_level_encoding == null) {
      sb.append("null");
    } else {
      sb.append(this.repetition_level_encoding);
    }
    first = false;
    if (isSetStatistics()) {
      if (!first) sb.append(", ");
      sb.append("statistics:");
      if (this.statistics == null) {
        sb.append("null");
      } else {
        sb.append(this.statistics);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'num_values' because it's a primitive and you chose the non-beans generator.
    if (encoding == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'encoding' was not present! Struct: " + toString());
    }
    if (definition_level_encoding == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'definition_level_encoding' was not present! Struct: " + toString());
    }
    if (repetition_level_encoding == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'repetition_level_encoding' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

