/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.parquet.format;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * TODO: *
 */
public class DictionaryPageHeader implements org.apache.thrift.TBase<DictionaryPageHeader, DictionaryPageHeader._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DictionaryPageHeader");

  private static final org.apache.thrift.protocol.TField NUM_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_values", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ENCODING_FIELD_DESC = new org.apache.thrift.protocol.TField("encoding", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField IS_SORTED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_sorted", org.apache.thrift.protocol.TType.BOOL, (short)3);

  /**
   * Number of values in the dictionary *
   */
  public int num_values; // required
  /**
   * Encoding using this dictionary page *
   * 
   * @see Encoding
   */
  public Encoding encoding; // required
  /**
   * If true, the entries in the dictionary are sorted in ascending order *
   */
  public boolean is_sorted; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Number of values in the dictionary *
     */
    NUM_VALUES((short)1, "num_values"),
    /**
     * Encoding using this dictionary page *
     * 
     * @see Encoding
     */
    ENCODING((short)2, "encoding"),
    /**
     * If true, the entries in the dictionary are sorted in ascending order *
     */
    IS_SORTED((short)3, "is_sorted");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_VALUES
          return NUM_VALUES;
        case 2: // ENCODING
          return ENCODING;
        case 3: // IS_SORTED
          return IS_SORTED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_VALUES_ISSET_ID = 0;
  private static final int __IS_SORTED_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_VALUES, new org.apache.thrift.meta_data.FieldMetaData("num_values", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENCODING, new org.apache.thrift.meta_data.FieldMetaData("encoding", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Encoding.class)));
    tmpMap.put(_Fields.IS_SORTED, new org.apache.thrift.meta_data.FieldMetaData("is_sorted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DictionaryPageHeader.class, metaDataMap);
  }

  public DictionaryPageHeader() {
  }

  public DictionaryPageHeader(
    int num_values,
    Encoding encoding)
  {
    this();
    this.num_values = num_values;
    setNum_valuesIsSet(true);
    this.encoding = encoding;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DictionaryPageHeader(DictionaryPageHeader other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.num_values = other.num_values;
    if (other.isSetEncoding()) {
      this.encoding = other.encoding;
    }
    this.is_sorted = other.is_sorted;
  }

  public DictionaryPageHeader deepCopy() {
    return new DictionaryPageHeader(this);
  }

  @Override
  public void clear() {
    setNum_valuesIsSet(false);
    this.num_values = 0;
    this.encoding = null;
    setIs_sortedIsSet(false);
    this.is_sorted = false;
  }

  /**
   * Number of values in the dictionary *
   */
  public int getNum_values() {
    return this.num_values;
  }

  /**
   * Number of values in the dictionary *
   */
  public DictionaryPageHeader setNum_values(int num_values) {
    this.num_values = num_values;
    setNum_valuesIsSet(true);
    return this;
  }

  public void unsetNum_values() {
    __isset_bit_vector.clear(__NUM_VALUES_ISSET_ID);
  }

  /** Returns true if field num_values is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_values() {
    return __isset_bit_vector.get(__NUM_VALUES_ISSET_ID);
  }

  public void setNum_valuesIsSet(boolean value) {
    __isset_bit_vector.set(__NUM_VALUES_ISSET_ID, value);
  }

  /**
   * Encoding using this dictionary page *
   * 
   * @see Encoding
   */
  public Encoding getEncoding() {
    return this.encoding;
  }

  /**
   * Encoding using this dictionary page *
   * 
   * @see Encoding
   */
  public DictionaryPageHeader setEncoding(Encoding encoding) {
    this.encoding = encoding;
    return this;
  }

  public void unsetEncoding() {
    this.encoding = null;
  }

  /** Returns true if field encoding is set (has been assigned a value) and false otherwise */
  public boolean isSetEncoding() {
    return this.encoding != null;
  }

  public void setEncodingIsSet(boolean value) {
    if (!value) {
      this.encoding = null;
    }
  }

  /**
   * If true, the entries in the dictionary are sorted in ascending order *
   */
  public boolean isIs_sorted() {
    return this.is_sorted;
  }

  /**
   * If true, the entries in the dictionary are sorted in ascending order *
   */
  public DictionaryPageHeader setIs_sorted(boolean is_sorted) {
    this.is_sorted = is_sorted;
    setIs_sortedIsSet(true);
    return this;
  }

  public void unsetIs_sorted() {
    __isset_bit_vector.clear(__IS_SORTED_ISSET_ID);
  }

  /** Returns true if field is_sorted is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_sorted() {
    return __isset_bit_vector.get(__IS_SORTED_ISSET_ID);
  }

  public void setIs_sortedIsSet(boolean value) {
    __isset_bit_vector.set(__IS_SORTED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUM_VALUES:
      if (value == null) {
        unsetNum_values();
      } else {
        setNum_values((Integer)value);
      }
      break;

    case ENCODING:
      if (value == null) {
        unsetEncoding();
      } else {
        setEncoding((Encoding)value);
      }
      break;

    case IS_SORTED:
      if (value == null) {
        unsetIs_sorted();
      } else {
        setIs_sorted((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_VALUES:
      return Integer.valueOf(getNum_values());

    case ENCODING:
      return getEncoding();

    case IS_SORTED:
      return Boolean.valueOf(isIs_sorted());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUM_VALUES:
      return isSetNum_values();
    case ENCODING:
      return isSetEncoding();
    case IS_SORTED:
      return isSetIs_sorted();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DictionaryPageHeader)
      return this.equals((DictionaryPageHeader)that);
    return false;
  }

  public boolean equals(DictionaryPageHeader that) {
    if (that == null)
      return false;

    boolean this_present_num_values = true;
    boolean that_present_num_values = true;
    if (this_present_num_values || that_present_num_values) {
      if (!(this_present_num_values && that_present_num_values))
        return false;
      if (this.num_values != that.num_values)
        return false;
    }

    boolean this_present_encoding = true && this.isSetEncoding();
    boolean that_present_encoding = true && that.isSetEncoding();
    if (this_present_encoding || that_present_encoding) {
      if (!(this_present_encoding && that_present_encoding))
        return false;
      if (!this.encoding.equals(that.encoding))
        return false;
    }

    boolean this_present_is_sorted = true && this.isSetIs_sorted();
    boolean that_present_is_sorted = true && that.isSetIs_sorted();
    if (this_present_is_sorted || that_present_is_sorted) {
      if (!(this_present_is_sorted && that_present_is_sorted))
        return false;
      if (this.is_sorted != that.is_sorted)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_num_values = true;
    builder.append(present_num_values);
    if (present_num_values)
      builder.append(num_values);

    boolean present_encoding = true && (isSetEncoding());
    builder.append(present_encoding);
    if (present_encoding)
      builder.append(encoding.getValue());

    boolean present_is_sorted = true && (isSetIs_sorted());
    builder.append(present_is_sorted);
    if (present_is_sorted)
      builder.append(is_sorted);

    return builder.toHashCode();
  }

  public int compareTo(DictionaryPageHeader other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DictionaryPageHeader typedOther = (DictionaryPageHeader)other;

    lastComparison = Boolean.valueOf(isSetNum_values()).compareTo(typedOther.isSetNum_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_values, typedOther.num_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEncoding()).compareTo(typedOther.isSetEncoding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncoding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encoding, typedOther.encoding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_sorted()).compareTo(typedOther.isSetIs_sorted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_sorted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_sorted, typedOther.is_sorted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NUM_VALUES
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.num_values = iprot.readI32();
            setNum_valuesIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ENCODING
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.encoding = Encoding.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // IS_SORTED
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.is_sorted = iprot.readBool();
            setIs_sortedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetNum_values()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_values' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(NUM_VALUES_FIELD_DESC);
    oprot.writeI32(this.num_values);
    oprot.writeFieldEnd();
    if (this.encoding != null) {
      oprot.writeFieldBegin(ENCODING_FIELD_DESC);
      oprot.writeI32(this.encoding.getValue());
      oprot.writeFieldEnd();
    }
    if (isSetIs_sorted()) {
      oprot.writeFieldBegin(IS_SORTED_FIELD_DESC);
      oprot.writeBool(this.is_sorted);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DictionaryPageHeader(");
    boolean first = true;

    sb.append("num_values:");
    sb.append(this.num_values);
    first = false;
    if (!first) sb.append(", ");
    sb.append("encoding:");
    if (this.encoding == null) {
      sb.append("null");
    } else {
      sb.append(this.encoding);
    }
    first = false;
    if (isSetIs_sorted()) {
      if (!first) sb.append(", ");
      sb.append("is_sorted:");
      sb.append(this.is_sorted);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'num_values' because it's a primitive and you chose the non-beans generator.
    if (encoding == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'encoding' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

